<?php

/**
 * Wise Chat Media Library interactions.
 *
 * @version 1.0
 * @author Marcin Ławrowski <marcin.lawrowski@gmail.com>
 * @required GD and Curl extensions, operational Media Library
 */
class WiseChatImagesDownloader {
	const UPLOAD_FILE_NAME = '_wise_chat_upload';
	const IMAGE_TH_WIDTH = 60;
	const IMAGE_TH_HEIGHT = 60;
	const IMAGE_SIZE_LIMIT = 2097152; // 2 MB
	
	/**
	* @var WiseChatOptions
	*/
	private $options;
	
	/**
	* @var string
	*/
	private $tempFileName;
	
	/**
	* @var array
	*/
	private $logs;
	
	/**
	* @var array Supported types of images
	*/
	private $supportedExtensions = array(
		'image/gif' => 'gif',
		'image/jpeg' => 'jpg',
		'image/png' => 'png',
		'image/bmp' => 'bmp',
		'image/tiff' => 'tiff'
	);
	
	public function __construct() {
		$this->options = WiseChatOptions::getInstance();
		$this->logs = array();
	}
	
	/**
	* Downloads image file from the given URL and saves it into the Media Library.
	* Returns image details as an array or null if an error occurred. Custom thumbnail image is generated as well.
	* Redirections in retrieving the image are not supported.
	*
	* @param string $url URL to image file
	* @param string $channel Channel
	*
	* @return array|null Array containing keys: id, image, image-th
	*/
	public function downloadImage($url, $channel) {
		if (!$this->checkRequirements()) {
			return null;
		}
	
		$this->createTempFile();
		
		$result = null;
		if (is_array($this->downloadImageFile($url))) {
			$result = $this->saveImageInMediaLibrary($channel);
		}
		
		$this->deleteTempFile();
		
		return $result;
	}
	
	/**
	* Saves given image into the Media Library.
	* Returns image details as an array or null if an error occurred. Custom thumbnail image is generated as well.
	*
	* @param string $imageData Raw image data
	* @param string $channel Channel
	*
	* @return array|null Array containing keys: id, image, image-th
	*/
	public function saveImage($imageData, $channel) {
		if (!$this->checkRequirements()) {
			return null;
		}
	
		$this->createTempFile();
		$this->saveTempFile($imageData);
		$result = null;
		if (is_array($this->getTempFileImageInfo())) {
			$result = $this->saveImageInMediaLibrary($channel);
		}
		
		$this->deleteTempFile();
		
		return $result;
	}
	
	/**
	* Removes additional thumbnail image (generated by the chat) for given attachment.
	*
	* @param string $attachmentId
	*
	* @return null
	*/
	public function removeRelatedImages($attachmentId) {
		$imagePath = get_attached_file($attachmentId);
		$imageThPath = preg_replace('/\.([a-zA-Z]+)$/', '-th.$1', $imagePath);
		if (file_exists($imageThPath) && is_writable($imageThPath)) {
			unlink($imageThPath);
		}
	}
	
	/**
	* Returns all logs.
	*
	* @return string
	*/
	public function getLogs() {
		return implode("\n", $this->logs);
	}
	
	/**
	* Saves image passed in $_FILES (under self::UPLOAD_FILE_NAME key) in the Media Library.
	* Returns null if error occurrs.
	*
	* @param string $channel Channel
	*
	* @return array|null
	*/
	private function saveImageInMediaLibrary($channel) {
		$result = null;
		
		require_once(ABSPATH.'wp-admin/includes/image.php');
		require_once(ABSPATH.'wp-admin/includes/file.php');
		require_once(ABSPATH.'wp-admin/includes/media.php');
		
		$attachmentId = media_handle_sideload(
			$_FILES[self::UPLOAD_FILE_NAME], 0, null, array()
		);
		
		if (is_wp_error($attachmentId)) {
			$this->logError('Error creating new entry in media library: '.$attachmentId->get_error_message());
		} else {
			$result = array(
				'id' => $attachmentId,
				'image' => wp_get_attachment_url($attachmentId),
				'image-th' => $this->generateThumbnail($attachmentId)
			);
			
			$postUpdate = array(
				'ID' => $attachmentId,
				'post_title' => $_FILES[self::UPLOAD_FILE_NAME]['name']
			);
			wp_update_post($postUpdate);
		}
		
		return $result;
	}
	
	/**
	* Checks requirements of images processing.
	*
	* @return boolean
	*/
	private function checkRequirements() {
		if (!extension_loaded('gd') || !function_exists('gd_info')) {
			$this->logError('GD extension is not installed');
			return false;
		}
		if (!extension_loaded('curl') || !function_exists('curl_init')) {
			$this->logError('Curl extension is not installed');
			return false;
		}
		
		return true;
	}
	
	/**
	* Generates thumbnail image for given image and returns URL of the thumbnail.
	*
	* @param string $attachmentId
	*
	* @return null|string
	*/
	private function generateThumbnail($attachmentId) {
		$imagePath = get_attached_file($attachmentId);
		$imageThPath = preg_replace('/\.([a-zA-Z]+)$/', '-th.$1', $imagePath);
		
		$image = wp_get_image_editor($imagePath);
		if (!is_wp_error($image)) {
			$image->resize(self::IMAGE_TH_WIDTH, self::IMAGE_TH_HEIGHT, true);
			$image->save($imageThPath);
		} else {
			$this->logError('Error creating thumbnail: '.$image->get_error_message());
			return null;
		}
		
		$imageUrl = wp_get_attachment_url($attachmentId);
		$imageThUrl = preg_replace('/\.([a-zA-Z]+)$/', '-th.$1', $imageUrl);
		
		return $imageThUrl;
	}
	
	/**
	* Downloads image file from given URL and saves it into temporary file.
	* Null is returned if the file is not an image or redirections were experienced.
	*
	* @param string $url
	*
	* @return array|null
	*/
	private function downloadImageFile($url) {
		$imageData = $this->getDataOverHttp($url);
		if ($imageData === null) {
			$this->logError('Image could not be downloaded');
			return null;
		}
		$this->saveTempFile($imageData);
		
		return $this->getTempFileImageInfo();
	}
	
	/**
	* Performs HTTP request and returns resource stored under given URL. 
	* Null is returned if HTTP status code of the response is not equal 200.
	*
	* @param string $url
	*
	* @return string|null
	*/
	private function getDataOverHttp($url) {
		$curl = curl_init($url);
		curl_setopt($curl, CURLOPT_HEADER, 0);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($curl, CURLOPT_BINARYTRANSFER, 1);
		$data = curl_exec($curl);
		$httpStatus = intval(curl_getinfo($curl, CURLINFO_HTTP_CODE));
		curl_close($curl);
		
		if ($httpStatus != 200) {
			$this->logError('Image downloading failure - incorrect HTTP status: '.$httpStatus);
			return null;
		}
		
		if (strlen($data) > self::IMAGE_SIZE_LIMIT) {
			$this->logError('Image downloading failure - image is to big: '.strlen($data).' bytes');
			return null;
		}
		
		return $data;
	}
	
	/**
	* Returns information about the temporary file but only if it is an image file.
	*
	* @return null|array
	*/
	private function getTempFileImageInfo() {
		$fileInfo = file_exists($this->tempFileName) ? getimagesize($this->tempFileName) : null;
		if (is_array($fileInfo)) {
			$mimeType = $fileInfo['mime'];
			if (!array_key_exists($mimeType, $this->supportedExtensions)) {
				$this->logError('Unsupported mime type: '.$mimeType);
				return null;
			}
			$fileName = date('Ymd-His').'-'.uniqid(rand()).'.'.$this->supportedExtensions[$mimeType];
			
			return $_FILES[self::UPLOAD_FILE_NAME] = array(
				'name' => $fileName,
				'type' => $mimeType,
				'tmp_name' => $this->tempFileName,
				'error' => 0,
				'size' => filesize($this->tempFileName),
			);
		}
		$this->logError('The file is not an image');
		
		return null;
	}
	
	/**
	* Creates a temporary file in /tmp directory.
	*
	* @return null
	*/
	private function createTempFile() {
		$this->deleteTempFile();
		$this->tempFileName = tempnam('/tmp', 'php_files');
	}
	
	/**
	* Saves given data in the temporary file.
	*
	* @param string $data
	*
	* @return null
	*/
	private function saveTempFile($data) {
		$fp = fopen($this->tempFileName,'w');
		fwrite($fp, $data);
		fclose($fp);
	}
	
	/**
	* Removes the temporary file which was created by the $this->createTempFile() method.
	*
	* @return null
	*/
	private function deleteTempFile() {
		if (strlen($this->tempFileName) > 0 && file_exists($this->tempFileName) && is_writable($this->tempFileName)){
			unlink($this->tempFileName);
		}
	}
	
	/**
	* Adds error log to the list of logs.
	*
	* @return null
	*/
	private function logError($message) {
		trigger_error('WordPress Wise Chat plugin error: '.$message, E_USER_NOTICE);
		$this->logs[] = 'Error: '.$message;
	}
}